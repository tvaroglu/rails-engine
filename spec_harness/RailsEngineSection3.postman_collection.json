{
	"info": {
		"_postman_id": "d2f47afb-6c0f-49c3-a40b-14bdf0cdd59f",
		"name": "Rails Engine, Part 3",
		"description": "Turing School of Software & Design, Backend Module 3 Solo Project\n\n\"Rails Engine\" is a Rails-based API which mimics an e-commerce platform reporting tool as an API. Users can query and store merchants and items, and retrieve information about an item's merchant, or a list of a merchant's items. Users can also run one of several \"business intelligence\" endpoints to do rich reporting using ActiveRecord queries.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "2b. Business Intelligence (choose any 4)",
			"item": [
				{
					"name": "Get Merchants with Most Revenue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchants', {",
									"    'Dicki-Bednar': 1148393.74,",
									"    \"Kassulke, O'Hara and Quitzon\": 1015275.15,",
									"    'Okuneva, Prohaska and Rolfson': 917424.86,",
									"    'Bechtelar, Jones and Stokes': 831493.84,",
									"    'Auer, Crooks and Shanahan': 829597.18,",
									"    'Pacocha-Mayer': 790702.25,",
									"    'Rath, Gleason and Spencer': 772778.60,",
									"    'Friesen, Hackett and Runte': 756151.37,",
									"    'Bernhard, Stanton and Funk': 748715.21,",
									"    'Terry-Moore': 741000.27,",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch top 10 merchants by revenue\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const merchant_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": { \"type\": \"string\"},",
									"                    \"revenue\": { \"type\": \"number\"},",
									"                },",
									"                \"required\": [\"name\", \"revenue\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_merchant = data[0];",
									"",
									"    // now check that the whole schema matches and has 10 merchants",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(10);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_merchant).to.have.jsonSchema(merchant_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_merchant).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 2 attributes",
									"    pm.expect(Object.keys(first_merchant.attributes).length).to.eq(2);",
									"",
									"    pm.expect(first_merchant.type).to.eq('merchant_name_revenue');",
									"",
									"    var merchantNames = Object.keys(pm.globals.get('merchants'));",
									"    var merchantRevenues = Object.values(pm.globals.get('merchants'));",
									"    var returnedNames = data.map(merchantData => merchantData.attributes.name);",
									"    var roundedRevenues = data.map(merchantData => Math.round(merchantData.attributes.revenue*100)/100);",
									"",
									"    returnedNames.forEach((name,idx) => {",
									"        pm.expect(returnedNames[idx]).to.eq(merchantNames[idx]);",
									"        pm.expect(roundedRevenues[idx]).to.eq(merchantRevenues[idx]);",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=1', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, top one merchant by revenue', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"    ",
									"        var merchantNames = Object.keys(pm.globals.get('merchants'));",
									"        var merchantRevenues = Object.values(pm.globals.get('merchants'));",
									"        var roundedRevenues = payload.data.map(merchantData => Math.round(merchantData.attributes.revenue*100)/100);",
									"    ",
									"        pm.expect(payload.data[0].attributes.name).to.eq(merchantNames[0])",
									"        pm.expect(roundedRevenues[0]).to.eq(merchantRevenues[0])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=1000000', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, all 100 merchants if quantity is too big', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(100);",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('sad path, returns an error of some sort if quantity value is blank', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants?quantity=asdasd', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('sad path, returns an error of some sort if quantity is a string', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, quantity param is missing', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/revenue/merchants?quantity=10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"revenue",
								"merchants"
							],
							"query": [
								{
									"key": "quantity",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchants who Sold Most Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchants', {",
									"    \"Kassulke, O'Hara and Quitzon\": 1653,",
									"    'Kozey Group': 1585,",
									"    'Thiel Inc': 1529,",
									"    'Okuneva, Prohaska and Rolfson': 1507,",
									"    'Daugherty Group': 1470,",
									"    'Marvin, Renner and Bauch': 1422,",
									"    'Rogahn LLC': 1407,",
									"    'Terry-Moore': 1397",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch top 8 merchants by items sold\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const merchant_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": { \"type\": \"string\" },",
									"                    \"count\": { \"type\": \"number\" }",
									"                },",
									"                \"required\": [\"name\",  \"count\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_merchant = data[0];",
									"",
									"    // now check that the whole schema matches and has all merchants from our pre-request script",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"",
									"    var merchantNames = Object.keys(pm.globals.get('merchants'));",
									"    var merchantCounts = Object.values(pm.globals.get('merchants'));",
									"    pm.expect(data.length).to.eq(merchantNames.length);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_merchant).to.have.jsonSchema(merchant_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_merchant).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 2 attributes",
									"    pm.expect(Object.keys(first_merchant.attributes).length).to.eq(2);",
									"",
									"    var returnedNames = data.map(merchantData => merchantData.attributes.name);",
									"    var returnedCounts = data.map(merchantData => merchantData.attributes.count);",
									"",
									"    returnedNames.forEach((name,idx) => {",
									"        pm.expect(returnedNames[idx]).to.eq(merchantNames[idx]);",
									"        pm.expect(returnedCounts[idx]).to.eq(merchantCounts[idx]);",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=1', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, top one merchant by items sold', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"",
									"        var merchantNames = Object.keys(pm.globals.get('merchants'));",
									"        var merchantCounts = Object.values(pm.globals.get('merchants'));",
									"        var returnedNames = payload.data.map(merchantData => merchantData.attributes.name);",
									"        var returnedCounts = payload.data.map(merchantData => merchantData.attributes.count);",
									"",
									"        pm.expect(returnedNames[0]).to.eq(merchantNames[0])",
									"        pm.expect(returnedCounts[0]).to.eq(merchantCounts[0])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=1000000', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, all 100 merchants if quantity is too big', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(100);",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('sad path, returns an error of some sort if quantity value is blank', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items?quantity=asdasd', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('sad path, returns an error of some sort if quantity is a string', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/merchants/most_items', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, quantity param is missing', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/merchants/most_items?quantity=8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"merchants",
								"most_items"
							],
							"query": [
								{
									"key": "quantity",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Revenue between Date Range",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('start_date', '2012-03-09');",
									"pm.globals.set('end_date', '2012-03-24');",
									"",
									"pm.globals.set('revenue', 43201227.80);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch revenue between two dates\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": {\"type\": \"null\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"revenue\": { \"type\": \"number\"},",
									"                        },",
									"                        \"required\": [\"revenue\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 1 attribute",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(null);",
									"    pm.expect(data.type).to.eq('revenue');",
									"",
									"    var rounded_revenue = Math.round(data.attributes.revenue * 100) / 100 ;",
									"",
									"    pm.expect(rounded_revenue).to.eq(pm.globals.get('revenue'));",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=1970-01-01&end=2100-01-01', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, all revenue if date range is really big', () => {",
									"        pm.expect(error).to.equal(null);",
									"        console.log('code', response.code)",
									"        pm.expect(response.code).to.eq(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.have.property('attributes');",
									"        pm.expect(payload.data.attributes).to.have.property('revenue');",
									"",
									"        var rounded_revenue = Math.round(payload.data.attributes.revenue * 100) / 100 ;",
									"        pm.expect(rounded_revenue).to.eq(57493574.87)",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, start date and end date are not provided', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=2012-03-01', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, start date is provided, but end date is not provided', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?end=2012-03-24', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, end date is provided, but start date is not provided', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=&end=', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, start date and end date are both blank', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=2012-03-01&end=', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, start date is set correctly, but end date is blank', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?start=&end=2012-03-24', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, end date is set correctly, but start date is blank', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue?start_date=2100-01-01&end_date=2000-01-01', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, end date is earlier than start_date', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.eq(400);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('error');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/revenue?start={{start_date}}&end={{end_date}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"revenue"
							],
							"query": [
								{
									"key": "start",
									"value": "{{start_date}}"
								},
								{
									"key": "end",
									"value": "{{end_date}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Revenue of a Single Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('merchant_id', '42')",
									"pm.globals.set('revenue', 532613.98);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch revenue for merchant id\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": {\"type\": \"string\" },",
									"                    \"type\": { \"type\": \"string\" },",
									"                    \"attributes\": { ",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"revenue\": { \"type\": \"number\"},",
									"                        },",
									"                        \"required\": [\"revenue\"]",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"type\", \"attributes\"]",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // now check that the whole schema matches by name and data type",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    // expect data has exactly 3 attributes",
									"    pm.expect(Object.keys(data).length).to.eq(3);",
									"",
									"    // expect that our \"attributes\" portion has exactly 1 attribute",
									"    pm.expect(Object.keys(data.attributes).length).to.eq(1);",
									"",
									"    // expect our values to match",
									"    pm.expect(data.id).to.eq(pm.globals.get('merchant_id'));",
									"    pm.expect(data.type).to.eq('merchant_revenue');",
									"    var rounded_revenue = Math.round(data.attributes.revenue * 100) / 100 ;",
									"",
									"    pm.expect(rounded_revenue).to.eq(pm.globals.get('revenue'));",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/merchants/8923987297', (error, response) => {",
									"    pm.test('sad path, bad integer id returns 404', () => {",
									"        pm.expect(response).to.have.property('code', 404);",
									"        pm.expect(response).to.have.property('status', 'Not Found');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/revenue/merchants/{{merchant_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"revenue",
								"merchants",
								"{{merchant_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Items with Most Revenue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('total_item_count', 2470); // with revenue",
									"",
									"pm.globals.set('items', [",
									"    {",
									"                \"name\": \"Item Dicta Autem\",",
									"                \"description\": \"Fugiat est ut eum impedit vel et. Deleniti quia debitis similique. Sint atque explicabo similique est. Iste fugit quis voluptas. Rerum ut harum sed fugiat eveniet ullam ut.\",",
									"                \"unit_price\": 853.19,",
									"                \"merchant_id\": 14,",
									"                \"revenue\": 1148393.74",
									"            },",
									"        {",
									"                \"name\": \"Item Nam Magnam\",",
									"                \"description\": \"Eligendi quibusdam eveniet temporibus sed ratione ut magnam. Sit alias et. Laborum dignissimos quos impedit excepturi molestiae.\",",
									"                \"unit_price\": 788.08,",
									"                \"merchant_id\": 89,",
									"                \"revenue\": 695086.56",
									"            },",
									"        {",
									"                \"name\": \"Item Aut Vero\",",
									"                \"description\": \"Et molestiae commodi facilis maxime alias ut. Iusto possimus et earum et. Ipsum et iure laudantium eum est ratione et. Est iste soluta. Rerum iste quas.\",",
									"                \"unit_price\": 943.78,",
									"                \"merchant_id\": 51,",
									"                \"revenue\": 517191.44",
									"            },",
									"        {",
									"                \"name\": \"Item Ut Voluptatem\",",
									"                \"description\": \"Sunt omnis explicabo labore corrupti dolores deleniti. Perferendis et doloribus fugit illum et doloremque hic. Consequuntur ex voluptatibus maxime dolorem perferendis veritatis ea.\",",
									"                \"unit_price\": 987.71,",
									"                \"merchant_id\": 82,",
									"                \"revenue\": 435580.11",
									"            },",
									"        {",
									"                \"name\": \"Item Amet Accusamus\",",
									"                \"description\": \"Nam sit quam voluptas suscipit molestiae et. Modi aliquid praesentium eligendi sed quas nesciunt. Aperiam et saepe quaerat voluptate.\",",
									"                \"unit_price\": 96.38,",
									"                \"merchant_id\": 49,",
									"                \"revenue\": 344076.60",
									"            },",
									"        {",
									"                \"name\": \"Item Ipsam Ea\",",
									"                \"description\": \"Sed sit possimus iusto et dolore ut rerum. Aut asperiores assumenda dolores quasi. Eos sit voluptatem repudiandae et modi aspernatur.\",",
									"                \"unit_price\": 91.79,",
									"                \"merchant_id\": 61,",
									"                \"revenue\": 327690.30",
									"            },",
									"        {",
									"                \"name\": \"Item Delectus Saepe\",",
									"                \"description\": \"Pariatur voluptatum at qui. Quisquam illo aspernatur. Repellat provident nemo vero quis ut enim. Voluptates et sint laborum. Magnam ut deleniti aliquam.\",",
									"                \"unit_price\": 415.29,",
									"                \"merchant_id\": 89,",
									"                \"revenue\": 320188.59",
									"            },",
									"        {",
									"                \"name\": \"Item Aut Dolore\",",
									"                \"description\": \"Asperiores aut quas. Consequatur ut aut dolorum quis dignissimos asperiores sed. Eius maiores ipsam enim et.\",",
									"                \"unit_price\": 991.88,",
									"                \"merchant_id\": 61,",
									"                \"revenue\": 311450.32",
									"            },",
									"        {",
									"                \"name\": \"Item Totam Distinctio\",",
									"                \"description\": \"Voluptatem voluptate deleniti esse voluptas sit ut. Quia asperiores velit pariatur expedita eligendi deserunt. Debitis dignissimos alias et vitae et suscipit. Culpa sit corrupti explicabo. Distinctio occaecati et itaque quos.\",",
									"                \"unit_price\": 537.42,",
									"                \"merchant_id\": 95,",
									"                \"revenue\": 310091.34",
									"            },",
									"        {",
									"                \"name\": \"Item Ut Totam\",",
									"                \"description\": \"Occaecati aut reiciendis. Dicta et eaque est fugit animi veritatis. Aliquam repudiandae voluptatem in minima natus. Veniam consequatur ipsam ut.\",",
									"                \"unit_price\": 707.83,",
									"                \"merchant_id\": 38,",
									"                \"revenue\": 271098.89",
									"            }",
									"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch top 10 items by revenue\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const item_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": { \"type\": \"string\"},",
									"                    \"description\": { \"type\": \"string\"},",
									"                    \"unit_price\": { \"type\": \"number\"},",
									"                    \"merchant_id\": { \"type\": \"number\"},",
									"                    \"revenue\": { \"type\": \"number\"},",
									"                },",
									"                \"required\": [\"name\", \"description\", \"unit_price\", \"merchant_id\", \"revenue\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_item = data[0];",
									"",
									"    // now check that the whole schema matches and has 10 items",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(10);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_item).to.have.jsonSchema(item_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_item).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 5 attributes",
									"    pm.expect(Object.keys(first_item.attributes).length).to.eq(5);",
									"",
									"    pm.expect(first_item.type).to.eq('item_revenue');",
									"",
									"    var items = pm.globals.get('items');",
									"    var itemNames = items.map(item => item.name);",
									"    var itemRevenues = items.map(item => item.revenue);",
									"    var returnedNames = data.map(itemData => itemData.attributes.name);",
									"    var roundedRevenues = data.map(itemData => Math.round(itemData.attributes.revenue*100)/100);",
									"    console.log(itemNames)",
									"    console.log(returnedNames)",
									"",
									"    returnedNames.forEach((name,idx) => {",
									"        pm.expect(returnedNames[idx]).to.eq(itemNames[idx]);",
									"        pm.expect(roundedRevenues[idx]).to.eq(itemRevenues[idx]);",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=1', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, top one item by revenue', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"",
									"        var items = pm.globals.get('items');",
									"        var itemsNames = items.map(item => item.name);",
									"        var itemsRevenues = items.map(item => item.revenue);",
									"        var returnedNames = payload.data.map(itemData => itemData.attributes.name);",
									"        var roundedRevenues = payload.data.map(itemData => Math.round(itemData.attributes.revenue*100)/100);",
									"",
									"        returnedNames.forEach((name,idx) => {",
									"            pm.expect(returnedNames[idx]).to.eq(itemsNames[idx]);",
									"            pm.expect(roundedRevenues[idx]).to.eq(itemsRevenues[idx]);",
									"        });",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=1000000', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, return all items if quantity is too big', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(pm.globals.get('total_item_count'));",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=-5', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('sad path, returns an error of some sort if quantity value is less than 0', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, returns an error of some sort if quantity value is blank', () => {",
									"        pm.expect(response.code).to.eq(400)",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/items?quantity=asdasd', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, returns an error of some sort if quantity is a string', () => {",
									"        pm.expect(response.code).to.eq(400)",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/revenue/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"revenue",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Potential Revenue of Unshipped Orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('total_invoice_count', 1);",
									"",
									"pm.globals.set('revenue', 1504.08);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch top invoices which are not shipped\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const merchant_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"potential_revenue\": { \"type\": \"number\"},",
									"                },",
									"                \"required\": [\"potential_revenue\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_invoice = data[0];",
									"",
									"    // now check that the whole schema matches and has only 1 invoice in the data set",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(1);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_invoice).to.have.jsonSchema(merchant_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_invoice).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 1 attributes",
									"    pm.expect(Object.keys(first_invoice.attributes).length).to.eq(1);",
									"console.log(first_invoice)",
									"    pm.expect(first_invoice.attributes.potential_revenue).to.eq(pm.globals.get('revenue'))",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=1', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, top one invoice by potential revenue', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"        pm.expect(payload.data[0].attributes.potential_revenue).to.eq(pm.globals.get('revenue'))",
									"",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=1000000', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('happy path, all invoices if quantity is too big', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.response.to.have.status(200);",
									"        var payload = response.json();",
									"        pm.expect(payload).to.have.property('data');",
									"        pm.expect(payload.data).to.be.an('array');",
									"        pm.expect(payload.data.length).to.eq(1);",
									"    });",
									"});",
									"",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, returns an error of some sort if quantity value is blank', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									"",
									"pm.sendRequest('http://localhost:3000/api/v1/revenue/unshipped?quantity=asdasd', (error, response) => {",
									"    if (error) {",
									"        console.log(error);",
									"    }",
									"    pm.test('edge case sad path, returns an error of some sort if quantity is a string', () => {",
									"        pm.expect(error).to.equal(null);",
									"        pm.expect(response.code).to.be.oneOf([400,500])",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/revenue/unshipped",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"revenue",
								"unshipped"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revenue Report by Month is Ascending Date Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set('total_item_count', 2483);",
									"",
									"pm.globals.set('weekly_data', [",
									"    {",
									"        \"week\": \"2012-03-05\",",
									"        \"revenue\": 14981117.17",
									"    },",
									"    {",
									"        \"week\": \"2012-03-12\",",
									"        \"revenue\": 18778641.38",
									"    },",
									"    {",
									"        \"week\": \"2012-03-19\",",
									"        \"revenue\": 19106531.88",
									"    },",
									"    {",
									"        \"week\": \"2012-03-26\",",
									"        \"revenue\": 4627284.44",
									"    }",
									"])"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"happy path, fetch monthly revenue\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.status(200);",
									"",
									"    const revenue_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"null\" },",
									"            \"type\": { \"type\": \"string\" },",
									"            \"attributes\": { ",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"week\": { \"type\": \"string\" },",
									"                    \"revenue\": { \"type\": \"number\"},",
									"                },",
									"                \"required\": [\"week\", \"revenue\"]",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"type\", \"attributes\"]",
									"    }",
									"",
									"    const base_schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"data\": {",
									"                \"type\": \"array\",",
									"            }",
									"        },",
									"        \"required\": ['data']",
									"    }",
									"",
									"    // expect a \"data\" attribute",
									"    pm.response.to.have.jsonBody('data');",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"    var first_week = data[0];",
									"",
									"    // now check that the whole schema matches and has 4 weeks of data",
									"    pm.response.to.have.jsonSchema(base_schema);",
									"    pm.expect(data.length).to.eq(4);",
									"",
									"    // now inspect the first item's schema to ensure it also matches",
									"    pm.expect(first_week).to.have.jsonSchema(revenue_schema);",
									"",
									"    // expect item data has exactly 3 attributes",
									"    pm.expect(Object.keys(first_week).length).to.eq(3);",
									"",
									"    // expect that our item \"attributes\" portion has exactly 2 attributes",
									"    pm.expect(Object.keys(first_week.attributes).length).to.eq(2);",
									"",
									"    var weeks = pm.globals.get('weekly_data');",
									"    var weekDates = weeks.map(week => week.week);",
									"    var weekRevenues = weeks.map(week => week.revenue);",
									"",
									"    var returnedWeeks = data.map(weekData => weekData.attributes.week);",
									"    var returnedRevenue = data.map(weekData => Math.round(weekData.attributes.revenue*100)/100);",
									"",
									"    returnedWeeks.forEach((name,idx) => {",
									"        pm.expect(returnedWeeks[idx]).to.eq(weekDates[idx]);",
									"        pm.expect(returnedRevenue[idx]).to.eq(weekRevenues[idx]);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/revenue/weekly",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"revenue",
								"weekly"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}
